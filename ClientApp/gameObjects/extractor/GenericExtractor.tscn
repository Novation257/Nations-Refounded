[gd_scene load_steps=3 format=3 uid="uid://b8witt57rpqyq"]

[sub_resource type="GDScript" id="GDScript_4xwks"]
script/source = "extends Polygon2D
class_name Extractor

# Identifiers
var id:int
var RN_name:String

#UI
var UI:Panel
var UI_type:Label
var UI_ownerID:Label
var UI_stockpile:Label
var UI_TTP:Label

#Signaling
var clicked:bool = false

# Production
var inputs:Resources = Resources.new()
var outputs:Resources = Resources.new()
var productionTime:int = 3600
var productionCountdown:int = productionTime
var stockpile:int = 0

# Sets the input and output values for different extractors
func setProduction(type:String) -> void:
	match type:
		\"Rice Farm\":
			inputs.money = 3
			inputs.energy = 2
			outputs.food = 5
		\"Cocoa Plantation\":
			inputs.energy = 3
			outputs.food = 2
			outputs.consumer_goods = 3
		\"Coal Mine\":
			inputs.money = 5
			outputs.energy = 15
		\"Dairy Farm\":
			inputs.energy = 5
			inputs.money = 5
			outputs.food = 12
		\"Wind Turbine\":
			inputs.money = 3
			outputs.energy = 7
	return

# Add production to the extractor and increase stockpile when necessary
func doProductionTick(time:int) -> void:
	if(stockpile < 12): # Don't do production if stockiple is full (12 production cycles)
		#print(\"Doing tick on extractor:\" + name)
		productionCountdown -= time
		if(productionCountdown <= 0): # Production cycle completed
			stockpile += 1
			productionCountdown = productionTime 
		
		# Update UI
		UI_stockpile.text = \"Stockpile: \" + str(stockpile)
		UI_TTP.text = \"TTP: \" + str(productionCountdown)
	return

# Return the resources stored in the extractor without subtracting from the stockpile
func get_stored() -> Resources:
	# Combine into one resource struct with inputs being negative and outputs being positive
	var temp:Resources = Resources.new()
	temp.combine(outputs)
	var negInputs = Resources.new()
	negInputs.combine(inputs)
	negInputs.applyToAll(func negate(x:int): return -x)
	temp.combine(negInputs)
	
	# Multiply every resource by stockpile
	temp.applyToAll(func mul(x:int): return x * stockpile)
	
	return temp

# Collect the production stored in the extractor
func collect() -> Resources:
	# Get resources stored in the extractor
	var temp:Resources = get_stored()
	
	# Reset stockpile and return resource changes
	stockpile = 0
	UI_stockpile.text = \"Stockpile: \" + str(stockpile)
	return temp

func _ready() -> void:
	# Set production values
	setProduction(get_meta(\"type\"))
	
	# Get UI nodes
	UI = get_node(\"%UI\")
	UI_type = get_node(\"%type\")
	UI_ownerID = get_node(\"%ownerID\")
	UI_stockpile = get_node(\"%stockpile\")
	UI_TTP = get_node(\"%TTP\")
	
	# Hide UI and update values
	UI.visible = false
	UI_type.text = get_meta(\"type\")
	UI_ownerID.text = \"OwnerID: \" + str(get_meta(\"ownerID\"))
	
	return

func _process(delta: float) -> void:
	# Make UI follow cursor if the UI isn't hidden
	if UI.visible == true:
		var m_pos:Vector2 = get_local_mouse_position()
		UI.position[0] = m_pos[0] + 10
		UI.position[1] = m_pos[1] + 0
	
	clicked = false
	
	return


# Show/hide UI if mouse is hoving over extractor
func _on_area_2d_mouse_entered() -> void:
	UI.visible = true
	return

func _on_area_2d_mouse_exited() -> void:
	UI.visible = false
	return

# On left click - collect resources
func _on_area_2d_input_event(viewport: Node, event: InputEvent, shape_idx: int) -> void:
	if(Input.is_action_just_pressed(\"LMB\")):
		#print(name + \" clicked\")
		clicked = true
	else: clicked = false
	return
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_x1knm"]
size = Vector2(150, 150)

[node name="Extractor" type="Polygon2D"]
color = Color(0.909804, 0.886275, 0.141176, 0.482353)
antialiased = true
polygon = PackedVector2Array(-75, -75, 75, -75, 75, 75, -75, 75)
script = SubResource("GDScript_4xwks")
metadata/ownerID = 0

[node name="Extractor Cube" type="Polygon2D" parent="."]
scale = Vector2(1, 0.992)
color = Color(0.403922, 0.815686, 0.372549, 1)
polygon = PackedVector2Array(-25, -25, -25, 25, 25, 25, 25, -25)

[node name="Area2D" type="Area2D" parent="."]

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D"]
shape = SubResource("RectangleShape2D_x1knm")

[node name="UI" type="Panel" parent="."]
unique_name_in_owner = true
offset_left = 100.0
offset_top = -80.0
offset_right = 250.0
offset_bottom = 30.0
metadata/_edit_use_anchors_ = true

[node name="type" type="Label" parent="UI"]
unique_name_in_owner = true
layout_mode = 1
anchors_preset = -1
offset_left = 5.0
offset_top = 4.93642
offset_right = 145.0
offset_bottom = 29.7698
text = "Extractor Name"
metadata/_edit_use_anchors_ = true

[node name="ownerID" type="Label" parent="UI"]
unique_name_in_owner = true
layout_mode = 1
anchors_preset = -1
anchor_left = -0.02
anchor_top = 0.00686417
anchor_right = 0.273333
anchor_bottom = 0.0235308
offset_left = 8.0
offset_top = 29.1763
offset_right = 104.0
offset_bottom = 52.1763
text = "OwnerID: 12"
metadata/_edit_use_anchors_ = true

[node name="stockpile" type="Label" parent="UI"]
unique_name_in_owner = true
layout_mode = 1
anchors_preset = -1
anchor_left = -0.0733333
anchor_top = -0.0279383
anchor_right = 0.22
anchor_bottom = -0.0112717
offset_left = 16.0
offset_top = 58.3526
offset_right = 112.0
offset_bottom = 81.3526
text = "Stockpile: 12"
metadata/_edit_use_anchors_ = true

[node name="TTP" type="Label" parent="UI"]
unique_name_in_owner = true
layout_mode = 1
anchors_preset = -1
anchor_left = 0.0333333
anchor_top = 0.727273
anchor_right = 0.32
anchor_bottom = 0.743939
offset_right = 97.0
offset_bottom = 23.0
text = "TTP: 12"
metadata/_edit_use_anchors_ = true

[connection signal="input_event" from="Area2D" to="." method="_on_area_2d_input_event"]
[connection signal="mouse_entered" from="Area2D" to="." method="_on_area_2d_mouse_entered"]
[connection signal="mouse_exited" from="Area2D" to="." method="_on_area_2d_mouse_exited"]
